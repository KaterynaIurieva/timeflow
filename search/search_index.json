{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Timeflow Documentation Source Code: https://github.com/dyvenia/timeflow/ A timeflow application built in FastAPI and IDOM. Structure This documentation follows the di\u00e1taxis framework . License This project is licensed under the terms of the MIT license.","title":"Home"},{"location":"#timeflow-documentation","text":"Source Code: https://github.com/dyvenia/timeflow/ A timeflow application built in FastAPI and IDOM.","title":"Timeflow Documentation"},{"location":"#structure","text":"This documentation follows the di\u00e1taxis framework .","title":"Structure"},{"location":"#license","text":"This project is licensed under the terms of the MIT license.","title":"License"},{"location":"api-reference/","text":"API module backend.api special capacity delete_capacities ( capacity_id = None , session = Depends ( get_session )) async Delete a capacity Source code in backend\\api\\capacity.py @router . delete ( \"/\" ) async def delete_capacities ( capacity_id : str = None , session : Session = Depends ( get_session ), ): \"\"\"Delete a capacity\"\"\" statement = select ( Capacity ) . where ( Capacity . id == capacity_id , ) capacity_to_delete = session . exec ( statement ) . one () session . delete ( capacity_to_delete ) session . commit () return True get_capacities ( session = Depends ( get_session ), is_locked = None , user_id = None , team_id = None , month = None , year = None ) async Get list of all capacities Source code in backend\\api\\capacity.py @router . get ( \"/\" ) async def get_capacities ( session : Session = Depends ( get_session ), is_locked : bool = None , user_id : int = None , team_id : int = None , month : int = None , year : int = None , ): \"\"\"Get list of all capacities\"\"\" statement = select ( Capacity ) \"\"\"Select capacity by user_id, team_id, month, year\"\"\" if ( user_id and team_id and month and year ) != None : statement = ( select ( Capacity . id . label ( \"capacity_id\" ), User . short_name . label ( \"user_short_name\" ), Team . short_name . label ( \"team_short_name\" ), Capacity . year , Capacity . month , Capacity . days , ) . select_from ( Capacity ) . join ( User , Capacity . user_id == User . id ) . join ( Team , Capacity . team_id == Team . id ) . where ( Capacity . user_id == user_id ) . where ( Capacity . team_id == team_id ) . where ( Capacity . month == month ) . where ( Capacity . year == year ) ) result = session . exec ( statement ) . all () return result post_capacity ( * , capacity , session = Depends ( get_session )) async Post a capacity. Source code in backend\\api\\capacity.py @router . post ( \"/\" ) async def post_capacity ( * , capacity : Capacity , session : Session = Depends ( get_session )): \"\"\"Post a capacity.\"\"\" statement = select ( Capacity ) . where ( and_ ( Capacity . user_id == capacity . user_id , Capacity . team_id == capacity . team_id , capacity . year == capacity . year , Capacity . month == capacity . month , ) ) try : result = session . exec ( statement ) . one () return False except NoResultFound : session . add ( capacity ) session . commit () session . refresh ( capacity ) return capacity client activate_clients ( * , client_id , session = Depends ( get_session )) async Activate a client Source code in backend\\api\\client.py @router . put ( \"/ {client_id} /activate\" ) async def activate_clients ( * , client_id : int , session : Session = Depends ( get_session ), ): \"\"\"Activate a client\"\"\" statement = select ( Client ) . where ( Client . id == client_id ) client_to_update = session . exec ( statement ) . one () client_to_update . is_active = True client_to_update . updated_at = datetime . now () session . add ( client_to_update ) session . commit () session . refresh ( client_to_update ) return client_to_update deactivate_clients ( * , client_id , session = Depends ( get_session )) async Deactivate a client Source code in backend\\api\\client.py @router . put ( \"/ {client_id} /deactivate\" ) async def deactivate_clients ( * , client_id : int , session : Session = Depends ( get_session ), ): \"\"\"Deactivate a client\"\"\" statement = select ( Client ) . where ( Client . id == client_id ) client_to_update = session . exec ( statement ) . one () client_to_update . is_active = False client_to_update . updated_at = datetime . now () session . add ( client_to_update ) session . commit () session . refresh ( client_to_update ) return client_to_update post_client ( * , client , session = Depends ( get_session )) async Post a new client Source code in backend\\api\\client.py @router . post ( \"/\" ) async def post_client ( * , client : Client , session : Session = Depends ( get_session )): \"\"\"Post a new client\"\"\" statement = select ( Client ) . where ( Client . name == client . name ) try : result = session . exec ( statement ) . one () return False except NoResultFound : session . add ( client ) session . commit () session . refresh ( client ) return client read_clients ( * , client_id = None , session = Depends ( get_session )) async Get a client by client_id Source code in backend\\api\\client.py @router . get ( \"/ {client_id} \" ) async def read_clients ( * , client_id : int = None , session : Session = Depends ( get_session ) ): \"\"\"Get a client by client_id\"\"\" statement = select ( Client ) . where ( Client . id == client_id ) try : result = session . exec ( statement ) . one () return result except NoResultFound : msg = f \"\"\"There is no client with id = { client_id } \"\"\" return msg read_clients_by_name ( * , name = None , session = Depends ( get_session )) async Get a client by client_name Source code in backend\\api\\client.py @router . get ( \"/names/ {name} \" ) async def read_clients_by_name ( * , name : str = None , session : Session = Depends ( get_session ) ): \"\"\"Get a client by client_name\"\"\" statement = select ( Client ) . where ( Client . name == name ) result = session . exec ( statement ) . one () return result read_clients_epics ( client_id = None , session = Depends ( get_session )) async Get epics from a client_id Source code in backend\\api\\client.py @router . get ( \"/ {client_id} /epics/\" ) async def read_clients_epics ( client_id : int = None , session : Session = Depends ( get_session ) ): \"\"\"Get epics from a client_id\"\"\" statement = ( select ( Client . id , Client . name , Epic . name ) . select_from ( Client ) . join ( Epic ) . where ( Client . id == client_id ) ) results = session . exec ( statement ) . all () return results update_clients ( * , client_id = None , new_client_name = None , session = Depends ( get_session )) async Update a client from a client_id Source code in backend\\api\\client.py @router . put ( \"/ {client_id} /new-name\" ) async def update_clients ( * , client_id : int = None , new_client_name : str = None , session : Session = Depends ( get_session ), ): \"\"\"Update a client from a client_id\"\"\" statement = select ( Client ) . where ( Client . id == client_id ) client_to_update = session . exec ( statement ) . one () client_to_update . name = new_client_name client_to_update . updated_at = datetime . now () session . add ( client_to_update ) session . commit () session . refresh ( client_to_update ) return client_to_update update_clients_and_epics ( * , client_id , session = Depends ( get_session )) async Deactivate a client and its epics Source code in backend\\api\\client.py @router . put ( \"/ {client_id} /deactivate-epics\" ) async def update_clients_and_epics ( * , client_id : int , session : Session = Depends ( get_session ), ): \"\"\"Deactivate a client and its epics\"\"\" statement1 = select ( Client ) . where ( Client . id == client_id ) client_to_update = session . exec ( statement1 ) . one () client_to_update . is_active = False client_to_update . updated_at = datetime . now () session . add ( client_to_update ) statement2 = select ( Epic ) . where ( Epic . client_id == client_id ) epics_to_update = session . exec ( statement2 ) . all () for epic in epics_to_update : epic . is_active = False session . add ( epic ) session . commit () return True demand delete_demands ( demand_id = None , session = Depends ( get_session )) async Delete a demand Source code in backend\\api\\demand.py @router . delete ( \"/\" ) async def delete_demands ( demand_id : str = None , session : Session = Depends ( get_session ), ): \"\"\"Delete a demand\"\"\" statement = select ( Demand ) . where ( Demand . id == demand_id , ) demand_to_delete = session . exec ( statement ) . one () session . delete ( demand_to_delete ) session . commit () return True get_demands ( session = Depends ( get_session ), is_locked = None , team_id = None , epic_id = None , month = None , year = None ) async Get list of all demands Source code in backend\\api\\demand.py @router . get ( \"/\" ) async def get_demands ( session : Session = Depends ( get_session ), is_locked : bool = None , team_id : int = None , epic_id : int = None , month : int = None , year : int = None , ): \"\"\"Get list of all demands\"\"\" statement = select ( Demand ) \"\"\"Select demand by epic_id, team_id, month, year\"\"\" if ( team_id and epic_id and month and year ) != None : statement = ( select ( Demand . id . label ( \"demand_id\" ), Team . short_name . label ( \"team_short_name\" ), Epic . short_name . label ( \"epic_short_name\" ), Demand . year , Demand . month , Demand . days , ) . select_from ( Demand ) . join ( Team , Demand . team_id == Team . id ) . join ( Epic , Demand . epic_id == Epic . id ) . where ( Demand . team_id == team_id ) . where ( Demand . epic_id == epic_id ) . where ( Demand . month == month ) . where ( Demand . year == year ) ) result = session . exec ( statement ) . all () return result post_demand ( * , demand , session = Depends ( get_session )) async Post a demand. Source code in backend\\api\\demand.py @router . post ( \"/\" ) async def post_demand ( * , demand : Demand , session : Session = Depends ( get_session )): \"\"\"Post a demand.\"\"\" statement = select ( Demand ) . where ( and_ ( Demand . team_id == demand . team_id , Demand . epic_id == demand . epic_id , Demand . year == demand . year , Demand . month == demand . month , ) ) try : result = session . exec ( statement ) . one () return False except NoResultFound : session . add ( demand ) session . commit () session . refresh ( demand ) return demand epic activate_epic ( epic_id = None , session = Depends ( get_session )) async Activate an epic Source code in backend\\api\\epic.py @router . put ( \"/ {epic_id} /activate\" ) async def activate_epic ( epic_id : str = None , session : Session = Depends ( get_session ), ): \"\"\"Activate an epic\"\"\" statement = select ( Epic ) . where ( Epic . id == epic_id ) epic_to_activate = session . exec ( statement ) . one () epic_to_activate . is_active = True epic_to_activate . updated_at = datetime . now () session . add ( epic_to_activate ) session . commit () session . refresh ( epic_to_activate ) return epic_to_activate deactivate_epic ( epic_id = None , session = Depends ( get_session )) async Deactivate an epic Source code in backend\\api\\epic.py @router . put ( \"/ {epic_id} /deactivate\" ) async def deactivate_epic ( epic_id : str = None , session : Session = Depends ( get_session ), ): \"\"\"Deactivate an epic\"\"\" statement = select ( Epic ) . where ( Epic . id == epic_id ) epic_to_deactivate = session . exec ( statement ) . one () epic_to_deactivate . is_active = False epic_to_deactivate . updated_at = datetime . now () session . add ( epic_to_deactivate ) session . commit () session . refresh ( epic_to_deactivate ) return epic_to_deactivate get_active_epics_list ( session = Depends ( get_session )) async Get list of active epics Source code in backend\\api\\epic.py @router . get ( \"/active\" ) async def get_active_epics_list ( session : Session = Depends ( get_session )): \"\"\"Get list of active epics\"\"\" statement = select ( Epic ) . where ( Epic . is_active == True ) results = session . exec ( statement ) . all () return results get_client_name_by_epic_id ( epic_id , session = Depends ( get_session )) async Get client name from epic_id Source code in backend\\api\\epic.py @router . get ( \"/ {epic_id} /client-name\" ) async def get_client_name_by_epic_id ( epic_id : int , session : Session = Depends ( get_session ) ): \"\"\"Get client name from epic_id\"\"\" statement = ( select ( Client . name . label ( \"client_name\" ), Client . id . label ( \"client_id\" )) . select_from ( Epic ) . join ( Sponsor , isouter = True ) . join ( Client , isouter = True ) . where ( Epic . id == epic_id ) . where ( Client . is_active == True ) ) result = session . exec ( statement ) . one () return result get_epic_by_team_sponsor ( team_id , sponsor_id ) async Get list of epics by team id and sponsor id Source code in backend\\api\\epic.py @router . get ( \"/teams/ {team_id} /sponsors/ {sponsor_id} /\" ) async def get_epic_by_team_sponsor ( team_id : int , sponsor_id : int ): \"\"\"Get list of epics by team id and sponsor id\"\"\" statement = ( select ( Epic . id . label ( \"epic_id\" ), Epic . name . label ( \"epic_name\" ), Epic . start_date , Team . name . label ( \"team_name\" ), Sponsor . short_name . label ( \"sponsor_short_name\" ), ) . select_from ( Epic ) . join ( Team ) . join ( Sponsor ) . where ( Epic . team_id == team_id ) . where ( Epic . sponsor_id == sponsor_id ) . where ( Epic . is_active == True ) ) results = session . exec ( statement ) . all () return results get_epic_list ( session = Depends ( get_session )) async Get list of epics Source code in backend\\api\\epic.py @router . get ( \"/\" ) async def get_epic_list ( session : Session = Depends ( get_session )): \"\"\"Get list of epics\"\"\" statement = select ( Epic ) results = session . exec ( statement ) . all () return results post_epic ( * , epic , session = Depends ( get_session )) async Post new epic Source code in backend\\api\\epic.py @router . post ( \"/\" ) async def post_epic ( * , epic : Epic , session : Session = Depends ( get_session ), ): \"\"\"Post new epic\"\"\" statement1 = select ( Epic ) . where ( Epic . name == epic . name ) try : result = session . exec ( statement1 ) . one () return False except NoResultFound : session . add ( epic ) session . commit () session . refresh ( epic ) return epic update_epic ( epic_id = None , new_short_name = None , new_name = None , session = Depends ( get_session )) async Update an epic Source code in backend\\api\\epic.py @router . put ( \"/\" ) async def update_epic ( epic_id : str = None , new_short_name : str = None , new_name : str = None , session : Session = Depends ( get_session ), ): \"\"\"Update an epic\"\"\" statement = select ( Epic ) . where ( Epic . id == epic_id ) . where ( Epic . is_active == True ) epic_to_update = session . exec ( statement ) . one () if new_short_name != None : epic_to_update . short_name = new_short_name if new_name != None : epic_to_update . name = new_name session . add ( epic_to_update ) epic_to_update . updated_at = datetime . now () session . commit () session . refresh ( epic_to_update ) return epic_to_update epic_area activate_epic_area ( epic_area_name = None , session = Depends ( get_session )) async Activate epic area Source code in backend\\api\\epic_area.py @router . put ( \"/ {epic_area_name} /activate\" ) async def activate_epic_area ( epic_area_name : str = None , session : Session = Depends ( get_session ), ): \"\"\"Activate epic area\"\"\" statement = select ( EpicArea ) . where ( EpicArea . name == epic_area_name ) epic_area_to_activate = session . exec ( statement ) . one () epic_area_to_activate . is_active = True epic_area_to_activate . updated_at = datetime . now () session . add ( epic_area_to_activate ) session . commit () session . refresh ( epic_area_to_activate ) return epic_area_to_activate deactivate_epic_area ( epic_area_name = None , session = Depends ( get_session )) async Deactivate epic area Source code in backend\\api\\epic_area.py @router . put ( \"/ {epic_area_name} /deactivate\" ) async def deactivate_epic_area ( epic_area_name : str = None , session : Session = Depends ( get_session ), ): \"\"\"Deactivate epic area\"\"\" statement = select ( EpicArea ) . where ( EpicArea . name == epic_area_name ) epic_area_to_deactivate = session . exec ( statement ) . one () epic_area_to_deactivate . is_active = False epic_area_to_deactivate . updated_at = datetime . now () session . add ( epic_area_to_deactivate ) session . commit () session . refresh ( epic_area_to_deactivate ) return epic_area_to_deactivate get_active_epic_area_list ( session = Depends ( get_session )) async Get list of active epic areas along with name of epic Source code in backend\\api\\epic_area.py @router . get ( \"/active\" ) async def get_active_epic_area_list ( session : Session = Depends ( get_session )): \"\"\"Get list of active epic areas along with name of epic\"\"\" statement = ( select ( EpicArea . id , EpicArea . epic_id , EpicArea . name . label ( \"epic_area_name\" ), Epic . id , Epic . name . label ( \"epic_name\" ), ) . join ( Epic ) . where ( EpicArea . is_active == True ) ) results = session . exec ( statement ) . all () return results get_epic_area_list ( session = Depends ( get_session )) async Get epic area list Source code in backend\\api\\epic_area.py @router . get ( \"/\" ) async def get_epic_area_list ( session : Session = Depends ( get_session )): \"\"\"Get epic area list\"\"\" statement = select ( EpicArea ) results = session . exec ( statement ) . all () return results get_epic_name_by_epic_area_id ( epic_area_id , session = Depends ( get_session )) async Get epic name by epic area id Source code in backend\\api\\epic_area.py @router . get ( \"/ {epic_area_id} /epic-name\" ) async def get_epic_name_by_epic_area_id ( epic_area_id : int , session : Session = Depends ( get_session ) ): \"\"\"Get epic name by epic area id\"\"\" statement = ( select ( EpicArea . id , Epic . id , Epic . name ) . join ( Epic ) . where ( EpicArea . id == epic_area_id ) . where ( Epic . is_active == True ) ) result = session . exec ( statement ) . one () return result post_epic_area ( * , epic_area , session = Depends ( get_session )) async Post new epic area Source code in backend\\api\\epic_area.py @router . post ( \"/\" ) async def post_epic_area ( * , epic_area : EpicArea , session : Session = Depends ( get_session ), ): \"\"\"Post new epic area\"\"\" statement1 = select ( EpicArea ) . where ( or_ ( EpicArea . name == epic_area . name , EpicArea . id == epic_area . id ) ) try : result = session . exec ( statement1 ) . one () return False except NoResultFound : session . add ( epic_area ) session . commit () session . refresh ( epic_area ) return epic_area read_epic_areas ( epic_area_name = None , session = Depends ( get_session )) async Read a single epic area using a given epic area name. Source code in backend\\api\\epic_area.py @router . get ( \"/ {epic_name} \" ) async def read_epic_areas ( epic_area_name : str = None , session : Session = Depends ( get_session ) ): \"\"\"Read a single epic area using a given epic area name.\"\"\" statement = select ( EpicArea ) . where ( EpicArea . name == epic_area_name ) try : result = session . exec ( statement ) . one () return result except NoResultFound : msg = f \"\"\"There is no epic area named { epic_area_name } \"\"\" return msg update_epic ( id = None , epic_id = None , name = None , is_active = None , session = Depends ( get_session )) async Update an epic area Source code in backend\\api\\epic_area.py @router . put ( \"/\" ) async def update_epic ( id : str = None , epic_id : str = None , name : str = None , is_active : bool = None , session : Session = Depends ( get_session ), ): \"\"\"Update an epic area\"\"\" statement = select ( EpicArea ) . where ( or_ ( EpicArea . name == name , EpicArea . id == id )) epic_area_to_update = session . exec ( statement ) . one () epic_area_to_update . epic_id = epic_id epic_area_to_update . name = name epic_area_to_update . is_active = is_active session . add ( epic_area_to_update ) epic_area_to_update . updated_at = datetime . now () session . commit () session . refresh ( epic_area_to_update ) return epic_area_to_update forecast delete_forecasts ( forecast_id = None , session = Depends ( get_session )) async Delete a forecast Source code in backend\\api\\forecast.py @router . delete ( \"/\" ) async def delete_forecasts ( forecast_id : str = None , session : Session = Depends ( get_session ), ): \"\"\"Delete a forecast\"\"\" statement = select ( Forecast ) . where ( Forecast . id == forecast_id , ) forecast_to_delete = session . exec ( statement ) . one () session . delete ( forecast_to_delete ) session . commit () return True get_forecasts ( session = Depends ( get_session )) async Get all forecasts. Source code in backend\\api\\forecast.py @router . get ( \"/\" ) async def get_forecasts ( session : Session = Depends ( get_session )): \"\"\"Get all forecasts.\"\"\" statement = select ( Forecast ) result = session . exec ( statement ) . all () return result get_forecasts_by_user_year_epic ( user_id , epic_id , year , month , session = Depends ( get_session )) async Get forecast by user, epic, year, month Source code in backend\\api\\forecast.py @router . get ( \"/users/ {user_id} /epics/ {epic_id} /year/ {year} /month/ {month} \" ) async def get_forecasts_by_user_year_epic ( user_id , epic_id , year , month , session : Session = Depends ( get_session ) ): \"\"\"Get forecast by user, epic, year, month\"\"\" statement = ( select ( Forecast . id , Forecast . month , Forecast . year , Forecast . days ) . where ( Forecast . user_id == user_id ) . where ( Forecast . epic_id == epic_id ) . where ( Forecast . year == year ) . where ( Forecast . month == month ) ) results = session . exec ( statement ) . all () return results get_forecasts_users ( user_id = None , session = Depends ( get_session )) async Get forecasts from a given user. Source code in backend\\api\\forecast.py @router . get ( \"/ {user_id} \" ) async def get_forecasts_users ( user_id : str = None , session : Session = Depends ( get_session ) ): \"\"\"Get forecasts from a given user.\"\"\" if user_id != None : statement = ( select ( Epic . name , Forecast . user_id , Forecast . month , Forecast . year , Forecast . days , ) . join ( Epic ) . where ( Forecast . user_id == user_id ) ) results = session . exec ( statement ) . all () return results else : raise ValueError post_forecast ( * , forecast , session = Depends ( get_session )) async Post a forecast. Source code in backend\\api\\forecast.py @router . post ( \"/\" ) async def post_forecast ( * , forecast : Forecast , session : Session = Depends ( get_session )): \"\"\"Post a forecast.\"\"\" statement = select ( Forecast ) . where ( and_ ( Forecast . epic_id == forecast . epic_id , Forecast . user_id == forecast . user_id , Forecast . year == forecast . year , Forecast . month == forecast . month , Forecast . days == forecast . days , ) ) try : result = session . exec ( statement ) . one () return False except NoResultFound : session . add ( forecast ) session . commit () session . refresh ( forecast ) return forecast update_forecasts ( user_id = None , epic_id = None , month = None , year = None , days = None , session = Depends ( get_session )) async Update a forecast Source code in backend\\api\\forecast.py @router . put ( \"/new-days\" ) async def update_forecasts ( user_id : str = None , epic_id : str = None , month : int = None , year : int = None , days : float = None , session : Session = Depends ( get_session ), ): \"\"\"Update a forecast\"\"\" statement = select ( Forecast ) . where ( and_ ( Forecast . user_id == user_id , Forecast . epic_id == epic_id , Forecast . month == month , Forecast . year == year , ) ) forecast_to_update = session . exec ( statement ) . one () forecast_to_update . days = days session . add ( forecast_to_update ) session . commit () session . refresh ( forecast_to_update ) return forecast_to_update rate activate_rate ( rate_id , session = Depends ( get_session )) async Activate a rate from a given rate_id. Source code in backend\\api\\rate.py @router . put ( \"/ {rate_id} /activate\" ) async def activate_rate ( rate_id : str , session : Session = Depends ( get_session ), ): \"\"\"Activate a rate from a given rate_id.\"\"\" statement = select ( Rate ) . where ( Rate . id == rate_id ) rate_to_activate = session . exec ( statement ) . one () rate_to_activate . is_active = True rate_to_activate . updated_at = datetime . now () session . add ( rate_to_activate ) session . commit () session . refresh ( rate_to_activate ) return rate_to_activate deactivate_rate_id ( rate_id = None , session = Depends ( get_session )) async Deactivate a rate from a given rate_id. Source code in backend\\api\\rate.py @router . put ( \"/ {rate_id} /deactivate\" ) async def deactivate_rate_id ( rate_id : str = None , session : Session = Depends ( get_session ), ): \"\"\"Deactivate a rate from a given rate_id.\"\"\" statement = select ( Rate ) . where ( Rate . id == rate_id ) rate_id_to_deactivate = session . exec ( statement ) . one () rate_id_to_deactivate . is_active = False rate_id_to_deactivate . updated_at = datetime . now () session . add ( rate_id_to_deactivate ) session . commit () session . refresh ( rate_id_to_deactivate ) return rate_id_to_deactivate rate ( rate , session = Depends ( get_session )) async Post new rate Source code in backend\\api\\rate.py @router . post ( \"/\" ) async def rate ( rate : Rate , session : Session = Depends ( get_session ), ): \"\"\"Post new rate\"\"\" statement1 = ( select ( Rate ) . where ( Rate . user_id == rate . user_id ) . where ( Rate . client_id == rate . client_id ) . where ( Rate . valid_from >= rate . valid_from ) ) one_day_delta = timedelta ( days = 1 ) close_date = rate . valid_from - one_day_delta statement2 = ( select ( Rate ) . where ( Rate . user_id == rate . user_id ) . where ( Rate . client_id == rate . client_id ) . where ( Rate . valid_to == far_date ) ) try : result = session . exec ( statement1 ) . one () return False except NoResultFound : try : rate_to_close = session . exec ( statement2 ) . one () rate_to_close . valid_to = close_date rate_to_close . updated_at = datetime . now () rate_to_close . is_active = False session . add ( rate_to_close ) session . add ( rate ) session . commit () return True except NoResultFound : session . add ( rate ) session . commit () return True rates_by_user_client_date ( user_id , client_id , date , session = Depends ( get_session )) async Get rates from a certain date. Source code in backend\\api\\rate.py @router . get ( \"/users/ {user_id} /clients/ {client_id} /months/\" ) async def rates_by_user_client_date ( user_id : int , client_id : int , date : str , session : Session = Depends ( get_session ), ): \"\"\"Get rates from a certain date.\"\"\" month_start_date = date_str_to_date ( date ) statement = ( select ( Rate ) . where ( Rate . user_id == user_id ) . where ( Rate . client_id == client_id ) . where ( Rate . valid_from <= month_start_date ) . where ( Rate . valid_to > month_start_date ) ) result = session . exec ( statement ) . all () return result read_active_rate ( user_id , client_id , session = Depends ( get_session )) async Get an active rate from a given user_id and client_id Source code in backend\\api\\rate.py @router . get ( \"/users/ {user_id} /clients/ {client_id} /active\" ) async def read_active_rate ( user_id : int , client_id : int , session : Session = Depends ( get_session ), ): \"\"\"Get an active rate from a given user_id and client_id\"\"\" statement = ( select ( Rate ) . where ( Rate . user_id == user_id ) . where ( Rate . client_id == client_id ) . where ( Rate . is_active == True ) ) result = session . exec ( statement ) . all () return result read_rates ( session = Depends ( get_session )) async Get all rates Source code in backend\\api\\rate.py @router . get ( \"/\" ) async def read_rates ( session : Session = Depends ( get_session ), ): \"\"\"Get all rates\"\"\" statement = select ( Rate ) result = session . exec ( statement ) . all () return result update_rates ( user_id = None , client_id = None , new_amount = None , session = Depends ( get_session )) async Update a rate. Source code in backend\\api\\rate.py @router . put ( \"/\" ) async def update_rates ( user_id : str = None , client_id : str = None , new_amount : str = None , session : Session = Depends ( get_session ), ): \"\"\"Update a rate.\"\"\" statement = ( select ( Rate ) . where ( Rate . user_id == user_id ) . where ( Rate . client_id == client_id ) . where ( Rate . is_active == True ) ) rate_to_update = session . exec ( statement ) . one () rate_to_update . amount = new_amount session . add ( rate_to_update ) session . commit () session . refresh ( rate_to_update ) return True sponsor activate_sponsor ( sponsor_name = None , session = Depends ( get_session )) async Activate sponsor Source code in backend\\api\\sponsor.py @router . put ( \"/ {sponsor_name} /activate\" ) async def activate_sponsor ( sponsor_name : str = None , session : Session = Depends ( get_session ), ): \"\"\"Activate sponsor\"\"\" statement = select ( Sponsor ) . where ( Sponsor . name == sponsor_name ) sponsor_to_activate = session . exec ( statement ) . one () sponsor_to_activate . is_active = True sponsor_to_activate . updated_at = datetime . now () session . add ( sponsor_to_activate ) session . commit () session . refresh ( sponsor_to_activate ) return sponsor_to_activate deactivate_sponsor ( sponsor_name = None , session = Depends ( get_session )) async Deactivate sponsor Source code in backend\\api\\sponsor.py @router . put ( \"/ {sponsor_name} /deactivate\" ) async def deactivate_sponsor ( sponsor_name : str = None , session : Session = Depends ( get_session ), ): \"\"\"Deactivate sponsor\"\"\" statement = select ( Sponsor ) . where ( Sponsor . name == sponsor_name ) sponsor_to_deactivate = session . exec ( statement ) . one () sponsor_to_deactivate . is_active = False sponsor_to_deactivate . updated_at = datetime . now () session . add ( sponsor_to_deactivate ) session . commit () session . refresh ( sponsor_to_deactivate ) return sponsor_to_deactivate get_active_sponsor_list ( session = Depends ( get_session )) async Get list of active sponsors along with name of client Source code in backend\\api\\sponsor.py @router . get ( \"/active\" ) async def get_active_sponsor_list ( session : Session = Depends ( get_session )): \"\"\"Get list of active sponsors along with name of client\"\"\" statement = ( select ( Sponsor . id , Sponsor . client_id , Sponsor . name . label ( \"sponsor_name\" ), Sponsor . short_name . label ( \"sponsor_short_name\" ), Client . name . label ( \"client_name\" ), ) . join ( Client ) . where ( Sponsor . is_active == True ) ) results = session . exec ( statement ) . all () return results get_client_name_by_sponsor_id ( sponsor_id , session = Depends ( get_session )) async Get client name by sponsor id Source code in backend\\api\\sponsor.py @router . get ( \"/ {sponsor_id} /client-name\" ) async def get_client_name_by_sponsor_id ( sponsor_id : int , session : Session = Depends ( get_session ) ): \"\"\"Get client name by sponsor id\"\"\" statement = ( select ( Sponsor . id , Client . id , Client . name ) . join ( Client ) . where ( Sponsor . id == sponsor_id ) . where ( Client . is_active == True ) ) result = session . exec ( statement ) . one () return result get_sponsor_list ( session = Depends ( get_session )) async Get entire sponsor list (enabled and disabled) Source code in backend\\api\\sponsor.py @router . get ( \"/\" ) async def get_sponsor_list ( session : Session = Depends ( get_session )): \"\"\"Get entire sponsor list (enabled and disabled)\"\"\" statement = select ( Sponsor ) results = session . exec ( statement ) . all () return results post_sponsor ( * , sponsor , session = Depends ( get_session )) async Post new sponsor Source code in backend\\api\\sponsor.py @router . post ( \"/\" ) async def post_sponsor ( * , sponsor : Sponsor , session : Session = Depends ( get_session ), ): \"\"\"Post new sponsor\"\"\" statement = select ( Sponsor ) . where ( or_ ( Sponsor . name == sponsor . name , Sponsor . id == sponsor . id ) ) try : result = session . exec ( statement ) . one () return False except NoResultFound : session . add ( sponsor ) session . commit () session . refresh ( sponsor ) return sponsor read_teams ( sponsor_name = None , session = Depends ( get_session )) async Read the contents of a given sponsor Source code in backend\\api\\sponsor.py @router . get ( \"/ {sponsor_name} \" ) async def read_teams ( sponsor_name : str = None , session : Session = Depends ( get_session )): \"\"\"Read the contents of a given sponsor\"\"\" statement = select ( Sponsor ) . where ( Sponsor . name == sponsor_name ) try : result = session . exec ( statement ) . ones () return result except NoResultFound : msg = f \"\"\"There is no sponsor named { sponsor_name } \"\"\" update_sponsor ( id = None , client_id = None , name = None , short_name = None , is_active = None , session = Depends ( get_session )) async Update sponsor Source code in backend\\api\\sponsor.py @router . put ( \"/\" ) async def update_sponsor ( id : int = None , client_id : int = None , name : str = None , short_name : str = None , is_active : bool = None , session : Session = Depends ( get_session ), ): \"\"\"Update sponsor\"\"\" statement = select ( Sponsor ) . where ( or_ ( Sponsor . name == name , Sponsor . id == id )) sponsor_to_update = session . exec ( statement ) . one () sponsor_to_update . client_id = client_id sponsor_to_update . name = name sponsor_to_update . short_name = short_name sponsor_to_update . is_active = is_active session . add ( sponsor_to_update ) sponsor_to_update . updated_at = datetime . now () session . commit () session . refresh ( sponsor_to_update ) return sponsor_to_update team activate_team ( team_name = None , session = Depends ( get_session )) async Activate team Source code in backend\\api\\team.py @router . put ( \"/ {team_name} /activate\" ) async def activate_team ( team_name : str = None , session : Session = Depends ( get_session ), ): \"\"\"Activate team\"\"\" statement = select ( Team ) . where ( Team . name == team_name ) team_to_activate = session . exec ( statement ) . one () team_to_activate . is_active = True team_to_activate . updated_at = datetime . now () session . add ( team_to_activate ) session . commit () session . refresh ( team_to_activate ) return team_to_activate deactivate_team ( team_name = None , session = Depends ( get_session )) async Deactivate team Source code in backend\\api\\team.py @router . put ( \"/ {team_name} /deactivate\" ) async def deactivate_team ( team_name : str = None , session : Session = Depends ( get_session ), ): \"\"\"Deactivate team\"\"\" statement = select ( Team ) . where ( Team . name == team_name ) team_to_deactivate = session . exec ( statement ) . one () team_to_deactivate . is_active = False team_to_deactivate . updated_at = datetime . now () session . add ( team_to_deactivate ) session . commit () session . refresh ( team_to_deactivate ) return team_to_deactivate get_active_team_list ( session = Depends ( get_session )) async Get list of active teams Source code in backend\\api\\team.py @router . get ( \"/active\" ) async def get_active_team_list ( session : Session = Depends ( get_session )): \"\"\"Get list of active teams\"\"\" statement = ( select ( Team . id , Team . lead_user_id , Team . name . label ( \"team_name\" ), Team . short_name . label ( \"team_short_name\" ), User . id , User . short_name . label ( \"user_name\" ), ) . join ( User ) . where ( Team . is_active == True ) ) results = session . exec ( statement ) . all () return results get_team_list ( session = Depends ( get_session )) async Get team list Source code in backend\\api\\team.py @router . get ( \"/\" ) async def get_team_list ( session : Session = Depends ( get_session )): \"\"\"Get team list\"\"\" statement = select ( Team ) results = session . exec ( statement ) . all () return results get_user_name_by_team_id ( team_id , session = Depends ( get_session )) async Get user name by team id Source code in backend\\api\\team.py @router . get ( \"/ {team_id} /user-name\" ) async def get_user_name_by_team_id ( team_id : int , session : Session = Depends ( get_session ) ): \"\"\"Get user name by team id\"\"\" statement = ( select ( Team . id , User . id , User . name ) . join ( User ) . where ( Team . id == team_id ) . where ( User . active == True ) ) result = session . exec ( statement ) . one () return result post_team ( * , team , session = Depends ( get_session )) async Post new team Source code in backend\\api\\team.py @router . post ( \"/\" ) async def post_team ( * , team : Team , session : Session = Depends ( get_session ), ): \"\"\"Post new team\"\"\" statement = select ( Team ) . where ( or_ ( Team . name == team . name , Team . id == team . id )) try : result = session . exec ( statement ) . one () return False except NoResultFound : session . add ( team ) session . commit () session . refresh ( team ) return team read_teams ( team_name = None , session = Depends ( get_session )) async Read the contents of a given team Source code in backend\\api\\team.py @router . get ( \"/ {team_name} \" ) async def read_teams ( team_name : str = None , session : Session = Depends ( get_session )): \"\"\"Read the contents of a given team\"\"\" statement = select ( Team ) . where ( Team . name == team_name ) try : result = session . exec ( statement ) . one () return result except NoResultFound : msg = f \"\"\"There is no team named { team_name } \"\"\" return msg update_team ( id = None , lead_user_id = None , name = None , is_active = None , session = Depends ( get_session )) async Update team Source code in backend\\api\\team.py @router . put ( \"/\" ) async def update_team ( id : str = None , lead_user_id : str = None , name : str = None , is_active : bool = None , session : Session = Depends ( get_session ), ): \"\"\"Update team\"\"\" statement = select ( Team ) . where ( or_ ( Team . name == name , Team . id == id )) team_to_update = session . exec ( statement ) . one () team_to_update . lead_user_id = lead_user_id team_to_update . name = name team_to_update . is_active = is_active session . add ( team_to_update ) team_to_update . updated_at = datetime . now () session . commit () session . refresh ( team_to_update ) return team_to_update timelog delete_timelogs ( * , timelog_id , session = Depends ( get_session )) async Delete timelogs Source code in backend\\api\\timelog.py @router . delete ( \"/ {timelog_id} \" ) async def delete_timelogs ( * , timelog_id : int , session : Session = Depends ( get_session ), ): \"\"\"Delete timelogs\"\"\" statement = select ( TimeLog ) . where ( TimeLog . id == timelog_id ) result = session . exec ( statement ) . one () timelog_to_delete = result session . delete ( timelog_to_delete ) session . commit () return True get_timelog_by_id ( timelog_id , session = Depends ( get_session )) async Get timelog by id Source code in backend\\api\\timelog.py @router . get ( \"/ {timelog_id} \" ) async def get_timelog_by_id ( timelog_id : int , session : Session = Depends ( get_session )): \"\"\"Get timelog by id\"\"\" statement = select ( TimeLog ) . where ( TimeLog . id == timelog_id ) result = session . exec ( statement ) . one () return result get_timelog_user_id ( * , user_id , month , year , session = Depends ( get_session )) async Get list of timelogs by user_id, month Source code in backend\\api\\timelog.py @router . get ( \"/users/ {user_id} /months/ {month} /years/ {year} \" ) async def get_timelog_user_id ( * , user_id : str , month : int , year : int , session : Session = Depends ( get_session ), ): \"\"\"Get list of timelogs by user_id, month\"\"\" statement = ( select ( TimeLog ) . where ( TimeLog . user_id == user_id ) . where ( TimeLog . month == month ) . where ( TimeLog . year == year ) ) results = session . exec ( statement ) . all () return results get_timelogs_all ( session = Depends ( get_session )) async Get all timelogs Source code in backend\\api\\timelog.py @router . get ( \"/\" ) async def get_timelogs_all ( session : Session = Depends ( get_session )): \"\"\"Get all timelogs\"\"\" statement = select ( TimeLog ) results = session . exec ( statement ) . all () return results timelog ( * , timelog , session = Depends ( get_session )) async Post timelog example: timelog.start_time = \"2022-01-19T08:30:00.000Z\" Source code in backend\\api\\timelog.py @router . post ( \"/\" ) async def timelog ( * , timelog : TimeLog , session : Session = Depends ( get_session )): \"\"\" Post timelog example: timelog.start_time = \"2022-01-19T08:30:00.000Z\" \"\"\" statement1 = ( select ( TimeLog ) . where ( TimeLog . user_id == timelog . user_id ) . where ( TimeLog . start_time >= timelog . start_time ) . where ( TimeLog . start_time < timelog . end_time ) ) statement2 = ( select ( TimeLog ) . where ( TimeLog . user_id == timelog . user_id ) . where ( TimeLog . end_time > timelog . start_time ) . where ( TimeLog . end_time <= timelog . end_time ) ) statement3 = ( select ( TimeLog ) . where ( TimeLog . user_id == timelog . user_id ) . where ( TimeLog . start_time >= timelog . start_time ) . where ( TimeLog . end_time <= timelog . end_time ) ) statement4 = ( select ( TimeLog ) . where ( TimeLog . user_id == timelog . user_id ) . where ( TimeLog . start_time < timelog . start_time ) . where ( TimeLog . end_time > timelog . end_time ) ) results1 = session . exec ( statement1 ) . all () results2 = session . exec ( statement2 ) . all () results3 = session . exec ( statement3 ) . all () results4 = session . exec ( statement4 ) . all () if results1 or results2 or results3 or results4 : return \"currently posted timelog overlaps another timelog\" else : session . add ( timelog ) session . commit () session . refresh ( timelog ) return timelog update_timelogs ( * , timelog_id = None , timelog_new_start_time = None , session = Depends ( get_session )) async Update timelogs Source code in backend\\api\\timelog.py @router . put ( \"/ {timelog_id} /new-start-time\" ) async def update_timelogs ( * , timelog_id : int = None , timelog_new_start_time : str = None , session : Session = Depends ( get_session ), ): \"\"\"Update timelogs\"\"\" statement = select ( TimeLog ) . where ( TimeLog . id == timelog_id ) timelog_to_update = session . exec ( statement ) . one () timelog_to_update . start_time = timelog_new_start_time session . add ( timelog_to_update ) session . commit () session . refresh ( timelog_to_update ) return timelog_to_update user get_users ( session = Depends ( get_session ), is_active = None , short_name = None , user_name = None , user_surname = None , email = None , role_id = None , start_date = None , team_id = None ) async Get list of all users Source code in backend\\api\\user.py @router . get ( \"/\" ) async def get_users ( session : Session = Depends ( get_session ), is_active : bool = None , short_name : str = None , user_name : str = None , user_surname : str = None , email : str = None , role_id : str = None , start_date : str = None , team_id : int = None , ): \"\"\"Get list of all users\"\"\" statement = select ( User ) if is_active != None : statement = select ( User ) . where ( User . is_active == is_active ) if short_name != None : statement = ( select ( User ) . where ( User . is_active == is_active ) . where ( User . short_name == short_name ) ) result = session . exec ( statement ) . all () return result post_user ( user , session = Depends ( get_session )) async Post new user Source code in backend\\api\\user.py @router . post ( \"/\" ) async def post_user ( user : User , session : Session = Depends ( get_session ), ): \"\"\"Post new user\"\"\" statement = select ( User ) . where ( User . short_name == user . short_name ) try : result = session . exec ( statement ) . one () return False except NoResultFound : session . add ( user ) session . commit () session . refresh ( user ) return user update_user ( user_id , is_active = None , new_short_name = None , new_first_name = None , new_last_name = None , new_email = None , new_team_id = None , session = Depends ( get_session )) async Update user email Source code in backend\\api\\user.py @router . put ( \"/ {user_id} /\" ) async def update_user ( user_id : int , is_active : Optional [ bool ] = None , new_short_name : Optional [ str ] = None , new_first_name : Optional [ str ] = None , new_last_name : Optional [ str ] = None , new_email : Optional [ str ] = None , new_team_id : Optional [ str ] = None , session : Session = Depends ( get_session ), ): \"\"\"Update user email\"\"\" statement = select ( User ) . where ( User . id == user_id ) user_to_update = session . exec ( statement ) . one () if is_active != None : user_to_update . is_active = is_active if new_short_name != None : user_to_update . short_name = new_short_name if new_first_name != None : user_to_update . first_name = new_first_name if new_last_name != None : user_to_update . last_name = new_last_name if new_email != None : user_to_update . email = new_email if new_team_id != None : user_to_update . team_id = new_team_id user_to_update . updated_at = datetime . now () session . add ( user_to_update ) session . commit () session . refresh ( user_to_update ) return user_to_update","title":"API"},{"location":"api-reference/#api-module","text":"","title":"API module"},{"location":"api-reference/#backend.api","text":"","title":"api"},{"location":"api-reference/#backend.api.capacity","text":"","title":"capacity"},{"location":"api-reference/#backend.api.capacity.delete_capacities","text":"Delete a capacity Source code in backend\\api\\capacity.py @router . delete ( \"/\" ) async def delete_capacities ( capacity_id : str = None , session : Session = Depends ( get_session ), ): \"\"\"Delete a capacity\"\"\" statement = select ( Capacity ) . where ( Capacity . id == capacity_id , ) capacity_to_delete = session . exec ( statement ) . one () session . delete ( capacity_to_delete ) session . commit () return True","title":"delete_capacities()"},{"location":"api-reference/#backend.api.capacity.get_capacities","text":"Get list of all capacities Source code in backend\\api\\capacity.py @router . get ( \"/\" ) async def get_capacities ( session : Session = Depends ( get_session ), is_locked : bool = None , user_id : int = None , team_id : int = None , month : int = None , year : int = None , ): \"\"\"Get list of all capacities\"\"\" statement = select ( Capacity ) \"\"\"Select capacity by user_id, team_id, month, year\"\"\" if ( user_id and team_id and month and year ) != None : statement = ( select ( Capacity . id . label ( \"capacity_id\" ), User . short_name . label ( \"user_short_name\" ), Team . short_name . label ( \"team_short_name\" ), Capacity . year , Capacity . month , Capacity . days , ) . select_from ( Capacity ) . join ( User , Capacity . user_id == User . id ) . join ( Team , Capacity . team_id == Team . id ) . where ( Capacity . user_id == user_id ) . where ( Capacity . team_id == team_id ) . where ( Capacity . month == month ) . where ( Capacity . year == year ) ) result = session . exec ( statement ) . all () return result","title":"get_capacities()"},{"location":"api-reference/#backend.api.capacity.post_capacity","text":"Post a capacity. Source code in backend\\api\\capacity.py @router . post ( \"/\" ) async def post_capacity ( * , capacity : Capacity , session : Session = Depends ( get_session )): \"\"\"Post a capacity.\"\"\" statement = select ( Capacity ) . where ( and_ ( Capacity . user_id == capacity . user_id , Capacity . team_id == capacity . team_id , capacity . year == capacity . year , Capacity . month == capacity . month , ) ) try : result = session . exec ( statement ) . one () return False except NoResultFound : session . add ( capacity ) session . commit () session . refresh ( capacity ) return capacity","title":"post_capacity()"},{"location":"api-reference/#backend.api.client","text":"","title":"client"},{"location":"api-reference/#backend.api.client.activate_clients","text":"Activate a client Source code in backend\\api\\client.py @router . put ( \"/ {client_id} /activate\" ) async def activate_clients ( * , client_id : int , session : Session = Depends ( get_session ), ): \"\"\"Activate a client\"\"\" statement = select ( Client ) . where ( Client . id == client_id ) client_to_update = session . exec ( statement ) . one () client_to_update . is_active = True client_to_update . updated_at = datetime . now () session . add ( client_to_update ) session . commit () session . refresh ( client_to_update ) return client_to_update","title":"activate_clients()"},{"location":"api-reference/#backend.api.client.deactivate_clients","text":"Deactivate a client Source code in backend\\api\\client.py @router . put ( \"/ {client_id} /deactivate\" ) async def deactivate_clients ( * , client_id : int , session : Session = Depends ( get_session ), ): \"\"\"Deactivate a client\"\"\" statement = select ( Client ) . where ( Client . id == client_id ) client_to_update = session . exec ( statement ) . one () client_to_update . is_active = False client_to_update . updated_at = datetime . now () session . add ( client_to_update ) session . commit () session . refresh ( client_to_update ) return client_to_update","title":"deactivate_clients()"},{"location":"api-reference/#backend.api.client.post_client","text":"Post a new client Source code in backend\\api\\client.py @router . post ( \"/\" ) async def post_client ( * , client : Client , session : Session = Depends ( get_session )): \"\"\"Post a new client\"\"\" statement = select ( Client ) . where ( Client . name == client . name ) try : result = session . exec ( statement ) . one () return False except NoResultFound : session . add ( client ) session . commit () session . refresh ( client ) return client","title":"post_client()"},{"location":"api-reference/#backend.api.client.read_clients","text":"Get a client by client_id Source code in backend\\api\\client.py @router . get ( \"/ {client_id} \" ) async def read_clients ( * , client_id : int = None , session : Session = Depends ( get_session ) ): \"\"\"Get a client by client_id\"\"\" statement = select ( Client ) . where ( Client . id == client_id ) try : result = session . exec ( statement ) . one () return result except NoResultFound : msg = f \"\"\"There is no client with id = { client_id } \"\"\" return msg","title":"read_clients()"},{"location":"api-reference/#backend.api.client.read_clients_by_name","text":"Get a client by client_name Source code in backend\\api\\client.py @router . get ( \"/names/ {name} \" ) async def read_clients_by_name ( * , name : str = None , session : Session = Depends ( get_session ) ): \"\"\"Get a client by client_name\"\"\" statement = select ( Client ) . where ( Client . name == name ) result = session . exec ( statement ) . one () return result","title":"read_clients_by_name()"},{"location":"api-reference/#backend.api.client.read_clients_epics","text":"Get epics from a client_id Source code in backend\\api\\client.py @router . get ( \"/ {client_id} /epics/\" ) async def read_clients_epics ( client_id : int = None , session : Session = Depends ( get_session ) ): \"\"\"Get epics from a client_id\"\"\" statement = ( select ( Client . id , Client . name , Epic . name ) . select_from ( Client ) . join ( Epic ) . where ( Client . id == client_id ) ) results = session . exec ( statement ) . all () return results","title":"read_clients_epics()"},{"location":"api-reference/#backend.api.client.update_clients","text":"Update a client from a client_id Source code in backend\\api\\client.py @router . put ( \"/ {client_id} /new-name\" ) async def update_clients ( * , client_id : int = None , new_client_name : str = None , session : Session = Depends ( get_session ), ): \"\"\"Update a client from a client_id\"\"\" statement = select ( Client ) . where ( Client . id == client_id ) client_to_update = session . exec ( statement ) . one () client_to_update . name = new_client_name client_to_update . updated_at = datetime . now () session . add ( client_to_update ) session . commit () session . refresh ( client_to_update ) return client_to_update","title":"update_clients()"},{"location":"api-reference/#backend.api.client.update_clients_and_epics","text":"Deactivate a client and its epics Source code in backend\\api\\client.py @router . put ( \"/ {client_id} /deactivate-epics\" ) async def update_clients_and_epics ( * , client_id : int , session : Session = Depends ( get_session ), ): \"\"\"Deactivate a client and its epics\"\"\" statement1 = select ( Client ) . where ( Client . id == client_id ) client_to_update = session . exec ( statement1 ) . one () client_to_update . is_active = False client_to_update . updated_at = datetime . now () session . add ( client_to_update ) statement2 = select ( Epic ) . where ( Epic . client_id == client_id ) epics_to_update = session . exec ( statement2 ) . all () for epic in epics_to_update : epic . is_active = False session . add ( epic ) session . commit () return True","title":"update_clients_and_epics()"},{"location":"api-reference/#backend.api.demand","text":"","title":"demand"},{"location":"api-reference/#backend.api.demand.delete_demands","text":"Delete a demand Source code in backend\\api\\demand.py @router . delete ( \"/\" ) async def delete_demands ( demand_id : str = None , session : Session = Depends ( get_session ), ): \"\"\"Delete a demand\"\"\" statement = select ( Demand ) . where ( Demand . id == demand_id , ) demand_to_delete = session . exec ( statement ) . one () session . delete ( demand_to_delete ) session . commit () return True","title":"delete_demands()"},{"location":"api-reference/#backend.api.demand.get_demands","text":"Get list of all demands Source code in backend\\api\\demand.py @router . get ( \"/\" ) async def get_demands ( session : Session = Depends ( get_session ), is_locked : bool = None , team_id : int = None , epic_id : int = None , month : int = None , year : int = None , ): \"\"\"Get list of all demands\"\"\" statement = select ( Demand ) \"\"\"Select demand by epic_id, team_id, month, year\"\"\" if ( team_id and epic_id and month and year ) != None : statement = ( select ( Demand . id . label ( \"demand_id\" ), Team . short_name . label ( \"team_short_name\" ), Epic . short_name . label ( \"epic_short_name\" ), Demand . year , Demand . month , Demand . days , ) . select_from ( Demand ) . join ( Team , Demand . team_id == Team . id ) . join ( Epic , Demand . epic_id == Epic . id ) . where ( Demand . team_id == team_id ) . where ( Demand . epic_id == epic_id ) . where ( Demand . month == month ) . where ( Demand . year == year ) ) result = session . exec ( statement ) . all () return result","title":"get_demands()"},{"location":"api-reference/#backend.api.demand.post_demand","text":"Post a demand. Source code in backend\\api\\demand.py @router . post ( \"/\" ) async def post_demand ( * , demand : Demand , session : Session = Depends ( get_session )): \"\"\"Post a demand.\"\"\" statement = select ( Demand ) . where ( and_ ( Demand . team_id == demand . team_id , Demand . epic_id == demand . epic_id , Demand . year == demand . year , Demand . month == demand . month , ) ) try : result = session . exec ( statement ) . one () return False except NoResultFound : session . add ( demand ) session . commit () session . refresh ( demand ) return demand","title":"post_demand()"},{"location":"api-reference/#backend.api.epic","text":"","title":"epic"},{"location":"api-reference/#backend.api.epic.activate_epic","text":"Activate an epic Source code in backend\\api\\epic.py @router . put ( \"/ {epic_id} /activate\" ) async def activate_epic ( epic_id : str = None , session : Session = Depends ( get_session ), ): \"\"\"Activate an epic\"\"\" statement = select ( Epic ) . where ( Epic . id == epic_id ) epic_to_activate = session . exec ( statement ) . one () epic_to_activate . is_active = True epic_to_activate . updated_at = datetime . now () session . add ( epic_to_activate ) session . commit () session . refresh ( epic_to_activate ) return epic_to_activate","title":"activate_epic()"},{"location":"api-reference/#backend.api.epic.deactivate_epic","text":"Deactivate an epic Source code in backend\\api\\epic.py @router . put ( \"/ {epic_id} /deactivate\" ) async def deactivate_epic ( epic_id : str = None , session : Session = Depends ( get_session ), ): \"\"\"Deactivate an epic\"\"\" statement = select ( Epic ) . where ( Epic . id == epic_id ) epic_to_deactivate = session . exec ( statement ) . one () epic_to_deactivate . is_active = False epic_to_deactivate . updated_at = datetime . now () session . add ( epic_to_deactivate ) session . commit () session . refresh ( epic_to_deactivate ) return epic_to_deactivate","title":"deactivate_epic()"},{"location":"api-reference/#backend.api.epic.get_active_epics_list","text":"Get list of active epics Source code in backend\\api\\epic.py @router . get ( \"/active\" ) async def get_active_epics_list ( session : Session = Depends ( get_session )): \"\"\"Get list of active epics\"\"\" statement = select ( Epic ) . where ( Epic . is_active == True ) results = session . exec ( statement ) . all () return results","title":"get_active_epics_list()"},{"location":"api-reference/#backend.api.epic.get_client_name_by_epic_id","text":"Get client name from epic_id Source code in backend\\api\\epic.py @router . get ( \"/ {epic_id} /client-name\" ) async def get_client_name_by_epic_id ( epic_id : int , session : Session = Depends ( get_session ) ): \"\"\"Get client name from epic_id\"\"\" statement = ( select ( Client . name . label ( \"client_name\" ), Client . id . label ( \"client_id\" )) . select_from ( Epic ) . join ( Sponsor , isouter = True ) . join ( Client , isouter = True ) . where ( Epic . id == epic_id ) . where ( Client . is_active == True ) ) result = session . exec ( statement ) . one () return result","title":"get_client_name_by_epic_id()"},{"location":"api-reference/#backend.api.epic.get_epic_by_team_sponsor","text":"Get list of epics by team id and sponsor id Source code in backend\\api\\epic.py @router . get ( \"/teams/ {team_id} /sponsors/ {sponsor_id} /\" ) async def get_epic_by_team_sponsor ( team_id : int , sponsor_id : int ): \"\"\"Get list of epics by team id and sponsor id\"\"\" statement = ( select ( Epic . id . label ( \"epic_id\" ), Epic . name . label ( \"epic_name\" ), Epic . start_date , Team . name . label ( \"team_name\" ), Sponsor . short_name . label ( \"sponsor_short_name\" ), ) . select_from ( Epic ) . join ( Team ) . join ( Sponsor ) . where ( Epic . team_id == team_id ) . where ( Epic . sponsor_id == sponsor_id ) . where ( Epic . is_active == True ) ) results = session . exec ( statement ) . all () return results","title":"get_epic_by_team_sponsor()"},{"location":"api-reference/#backend.api.epic.get_epic_list","text":"Get list of epics Source code in backend\\api\\epic.py @router . get ( \"/\" ) async def get_epic_list ( session : Session = Depends ( get_session )): \"\"\"Get list of epics\"\"\" statement = select ( Epic ) results = session . exec ( statement ) . all () return results","title":"get_epic_list()"},{"location":"api-reference/#backend.api.epic.post_epic","text":"Post new epic Source code in backend\\api\\epic.py @router . post ( \"/\" ) async def post_epic ( * , epic : Epic , session : Session = Depends ( get_session ), ): \"\"\"Post new epic\"\"\" statement1 = select ( Epic ) . where ( Epic . name == epic . name ) try : result = session . exec ( statement1 ) . one () return False except NoResultFound : session . add ( epic ) session . commit () session . refresh ( epic ) return epic","title":"post_epic()"},{"location":"api-reference/#backend.api.epic.update_epic","text":"Update an epic Source code in backend\\api\\epic.py @router . put ( \"/\" ) async def update_epic ( epic_id : str = None , new_short_name : str = None , new_name : str = None , session : Session = Depends ( get_session ), ): \"\"\"Update an epic\"\"\" statement = select ( Epic ) . where ( Epic . id == epic_id ) . where ( Epic . is_active == True ) epic_to_update = session . exec ( statement ) . one () if new_short_name != None : epic_to_update . short_name = new_short_name if new_name != None : epic_to_update . name = new_name session . add ( epic_to_update ) epic_to_update . updated_at = datetime . now () session . commit () session . refresh ( epic_to_update ) return epic_to_update","title":"update_epic()"},{"location":"api-reference/#backend.api.epic_area","text":"","title":"epic_area"},{"location":"api-reference/#backend.api.epic_area.activate_epic_area","text":"Activate epic area Source code in backend\\api\\epic_area.py @router . put ( \"/ {epic_area_name} /activate\" ) async def activate_epic_area ( epic_area_name : str = None , session : Session = Depends ( get_session ), ): \"\"\"Activate epic area\"\"\" statement = select ( EpicArea ) . where ( EpicArea . name == epic_area_name ) epic_area_to_activate = session . exec ( statement ) . one () epic_area_to_activate . is_active = True epic_area_to_activate . updated_at = datetime . now () session . add ( epic_area_to_activate ) session . commit () session . refresh ( epic_area_to_activate ) return epic_area_to_activate","title":"activate_epic_area()"},{"location":"api-reference/#backend.api.epic_area.deactivate_epic_area","text":"Deactivate epic area Source code in backend\\api\\epic_area.py @router . put ( \"/ {epic_area_name} /deactivate\" ) async def deactivate_epic_area ( epic_area_name : str = None , session : Session = Depends ( get_session ), ): \"\"\"Deactivate epic area\"\"\" statement = select ( EpicArea ) . where ( EpicArea . name == epic_area_name ) epic_area_to_deactivate = session . exec ( statement ) . one () epic_area_to_deactivate . is_active = False epic_area_to_deactivate . updated_at = datetime . now () session . add ( epic_area_to_deactivate ) session . commit () session . refresh ( epic_area_to_deactivate ) return epic_area_to_deactivate","title":"deactivate_epic_area()"},{"location":"api-reference/#backend.api.epic_area.get_active_epic_area_list","text":"Get list of active epic areas along with name of epic Source code in backend\\api\\epic_area.py @router . get ( \"/active\" ) async def get_active_epic_area_list ( session : Session = Depends ( get_session )): \"\"\"Get list of active epic areas along with name of epic\"\"\" statement = ( select ( EpicArea . id , EpicArea . epic_id , EpicArea . name . label ( \"epic_area_name\" ), Epic . id , Epic . name . label ( \"epic_name\" ), ) . join ( Epic ) . where ( EpicArea . is_active == True ) ) results = session . exec ( statement ) . all () return results","title":"get_active_epic_area_list()"},{"location":"api-reference/#backend.api.epic_area.get_epic_area_list","text":"Get epic area list Source code in backend\\api\\epic_area.py @router . get ( \"/\" ) async def get_epic_area_list ( session : Session = Depends ( get_session )): \"\"\"Get epic area list\"\"\" statement = select ( EpicArea ) results = session . exec ( statement ) . all () return results","title":"get_epic_area_list()"},{"location":"api-reference/#backend.api.epic_area.get_epic_name_by_epic_area_id","text":"Get epic name by epic area id Source code in backend\\api\\epic_area.py @router . get ( \"/ {epic_area_id} /epic-name\" ) async def get_epic_name_by_epic_area_id ( epic_area_id : int , session : Session = Depends ( get_session ) ): \"\"\"Get epic name by epic area id\"\"\" statement = ( select ( EpicArea . id , Epic . id , Epic . name ) . join ( Epic ) . where ( EpicArea . id == epic_area_id ) . where ( Epic . is_active == True ) ) result = session . exec ( statement ) . one () return result","title":"get_epic_name_by_epic_area_id()"},{"location":"api-reference/#backend.api.epic_area.post_epic_area","text":"Post new epic area Source code in backend\\api\\epic_area.py @router . post ( \"/\" ) async def post_epic_area ( * , epic_area : EpicArea , session : Session = Depends ( get_session ), ): \"\"\"Post new epic area\"\"\" statement1 = select ( EpicArea ) . where ( or_ ( EpicArea . name == epic_area . name , EpicArea . id == epic_area . id ) ) try : result = session . exec ( statement1 ) . one () return False except NoResultFound : session . add ( epic_area ) session . commit () session . refresh ( epic_area ) return epic_area","title":"post_epic_area()"},{"location":"api-reference/#backend.api.epic_area.read_epic_areas","text":"Read a single epic area using a given epic area name. Source code in backend\\api\\epic_area.py @router . get ( \"/ {epic_name} \" ) async def read_epic_areas ( epic_area_name : str = None , session : Session = Depends ( get_session ) ): \"\"\"Read a single epic area using a given epic area name.\"\"\" statement = select ( EpicArea ) . where ( EpicArea . name == epic_area_name ) try : result = session . exec ( statement ) . one () return result except NoResultFound : msg = f \"\"\"There is no epic area named { epic_area_name } \"\"\" return msg","title":"read_epic_areas()"},{"location":"api-reference/#backend.api.epic_area.update_epic","text":"Update an epic area Source code in backend\\api\\epic_area.py @router . put ( \"/\" ) async def update_epic ( id : str = None , epic_id : str = None , name : str = None , is_active : bool = None , session : Session = Depends ( get_session ), ): \"\"\"Update an epic area\"\"\" statement = select ( EpicArea ) . where ( or_ ( EpicArea . name == name , EpicArea . id == id )) epic_area_to_update = session . exec ( statement ) . one () epic_area_to_update . epic_id = epic_id epic_area_to_update . name = name epic_area_to_update . is_active = is_active session . add ( epic_area_to_update ) epic_area_to_update . updated_at = datetime . now () session . commit () session . refresh ( epic_area_to_update ) return epic_area_to_update","title":"update_epic()"},{"location":"api-reference/#backend.api.forecast","text":"","title":"forecast"},{"location":"api-reference/#backend.api.forecast.delete_forecasts","text":"Delete a forecast Source code in backend\\api\\forecast.py @router . delete ( \"/\" ) async def delete_forecasts ( forecast_id : str = None , session : Session = Depends ( get_session ), ): \"\"\"Delete a forecast\"\"\" statement = select ( Forecast ) . where ( Forecast . id == forecast_id , ) forecast_to_delete = session . exec ( statement ) . one () session . delete ( forecast_to_delete ) session . commit () return True","title":"delete_forecasts()"},{"location":"api-reference/#backend.api.forecast.get_forecasts","text":"Get all forecasts. Source code in backend\\api\\forecast.py @router . get ( \"/\" ) async def get_forecasts ( session : Session = Depends ( get_session )): \"\"\"Get all forecasts.\"\"\" statement = select ( Forecast ) result = session . exec ( statement ) . all () return result","title":"get_forecasts()"},{"location":"api-reference/#backend.api.forecast.get_forecasts_by_user_year_epic","text":"Get forecast by user, epic, year, month Source code in backend\\api\\forecast.py @router . get ( \"/users/ {user_id} /epics/ {epic_id} /year/ {year} /month/ {month} \" ) async def get_forecasts_by_user_year_epic ( user_id , epic_id , year , month , session : Session = Depends ( get_session ) ): \"\"\"Get forecast by user, epic, year, month\"\"\" statement = ( select ( Forecast . id , Forecast . month , Forecast . year , Forecast . days ) . where ( Forecast . user_id == user_id ) . where ( Forecast . epic_id == epic_id ) . where ( Forecast . year == year ) . where ( Forecast . month == month ) ) results = session . exec ( statement ) . all () return results","title":"get_forecasts_by_user_year_epic()"},{"location":"api-reference/#backend.api.forecast.get_forecasts_users","text":"Get forecasts from a given user. Source code in backend\\api\\forecast.py @router . get ( \"/ {user_id} \" ) async def get_forecasts_users ( user_id : str = None , session : Session = Depends ( get_session ) ): \"\"\"Get forecasts from a given user.\"\"\" if user_id != None : statement = ( select ( Epic . name , Forecast . user_id , Forecast . month , Forecast . year , Forecast . days , ) . join ( Epic ) . where ( Forecast . user_id == user_id ) ) results = session . exec ( statement ) . all () return results else : raise ValueError","title":"get_forecasts_users()"},{"location":"api-reference/#backend.api.forecast.post_forecast","text":"Post a forecast. Source code in backend\\api\\forecast.py @router . post ( \"/\" ) async def post_forecast ( * , forecast : Forecast , session : Session = Depends ( get_session )): \"\"\"Post a forecast.\"\"\" statement = select ( Forecast ) . where ( and_ ( Forecast . epic_id == forecast . epic_id , Forecast . user_id == forecast . user_id , Forecast . year == forecast . year , Forecast . month == forecast . month , Forecast . days == forecast . days , ) ) try : result = session . exec ( statement ) . one () return False except NoResultFound : session . add ( forecast ) session . commit () session . refresh ( forecast ) return forecast","title":"post_forecast()"},{"location":"api-reference/#backend.api.forecast.update_forecasts","text":"Update a forecast Source code in backend\\api\\forecast.py @router . put ( \"/new-days\" ) async def update_forecasts ( user_id : str = None , epic_id : str = None , month : int = None , year : int = None , days : float = None , session : Session = Depends ( get_session ), ): \"\"\"Update a forecast\"\"\" statement = select ( Forecast ) . where ( and_ ( Forecast . user_id == user_id , Forecast . epic_id == epic_id , Forecast . month == month , Forecast . year == year , ) ) forecast_to_update = session . exec ( statement ) . one () forecast_to_update . days = days session . add ( forecast_to_update ) session . commit () session . refresh ( forecast_to_update ) return forecast_to_update","title":"update_forecasts()"},{"location":"api-reference/#backend.api.rate","text":"","title":"rate"},{"location":"api-reference/#backend.api.rate.activate_rate","text":"Activate a rate from a given rate_id. Source code in backend\\api\\rate.py @router . put ( \"/ {rate_id} /activate\" ) async def activate_rate ( rate_id : str , session : Session = Depends ( get_session ), ): \"\"\"Activate a rate from a given rate_id.\"\"\" statement = select ( Rate ) . where ( Rate . id == rate_id ) rate_to_activate = session . exec ( statement ) . one () rate_to_activate . is_active = True rate_to_activate . updated_at = datetime . now () session . add ( rate_to_activate ) session . commit () session . refresh ( rate_to_activate ) return rate_to_activate","title":"activate_rate()"},{"location":"api-reference/#backend.api.rate.deactivate_rate_id","text":"Deactivate a rate from a given rate_id. Source code in backend\\api\\rate.py @router . put ( \"/ {rate_id} /deactivate\" ) async def deactivate_rate_id ( rate_id : str = None , session : Session = Depends ( get_session ), ): \"\"\"Deactivate a rate from a given rate_id.\"\"\" statement = select ( Rate ) . where ( Rate . id == rate_id ) rate_id_to_deactivate = session . exec ( statement ) . one () rate_id_to_deactivate . is_active = False rate_id_to_deactivate . updated_at = datetime . now () session . add ( rate_id_to_deactivate ) session . commit () session . refresh ( rate_id_to_deactivate ) return rate_id_to_deactivate","title":"deactivate_rate_id()"},{"location":"api-reference/#backend.api.rate.rate","text":"Post new rate Source code in backend\\api\\rate.py @router . post ( \"/\" ) async def rate ( rate : Rate , session : Session = Depends ( get_session ), ): \"\"\"Post new rate\"\"\" statement1 = ( select ( Rate ) . where ( Rate . user_id == rate . user_id ) . where ( Rate . client_id == rate . client_id ) . where ( Rate . valid_from >= rate . valid_from ) ) one_day_delta = timedelta ( days = 1 ) close_date = rate . valid_from - one_day_delta statement2 = ( select ( Rate ) . where ( Rate . user_id == rate . user_id ) . where ( Rate . client_id == rate . client_id ) . where ( Rate . valid_to == far_date ) ) try : result = session . exec ( statement1 ) . one () return False except NoResultFound : try : rate_to_close = session . exec ( statement2 ) . one () rate_to_close . valid_to = close_date rate_to_close . updated_at = datetime . now () rate_to_close . is_active = False session . add ( rate_to_close ) session . add ( rate ) session . commit () return True except NoResultFound : session . add ( rate ) session . commit () return True","title":"rate()"},{"location":"api-reference/#backend.api.rate.rates_by_user_client_date","text":"Get rates from a certain date. Source code in backend\\api\\rate.py @router . get ( \"/users/ {user_id} /clients/ {client_id} /months/\" ) async def rates_by_user_client_date ( user_id : int , client_id : int , date : str , session : Session = Depends ( get_session ), ): \"\"\"Get rates from a certain date.\"\"\" month_start_date = date_str_to_date ( date ) statement = ( select ( Rate ) . where ( Rate . user_id == user_id ) . where ( Rate . client_id == client_id ) . where ( Rate . valid_from <= month_start_date ) . where ( Rate . valid_to > month_start_date ) ) result = session . exec ( statement ) . all () return result","title":"rates_by_user_client_date()"},{"location":"api-reference/#backend.api.rate.read_active_rate","text":"Get an active rate from a given user_id and client_id Source code in backend\\api\\rate.py @router . get ( \"/users/ {user_id} /clients/ {client_id} /active\" ) async def read_active_rate ( user_id : int , client_id : int , session : Session = Depends ( get_session ), ): \"\"\"Get an active rate from a given user_id and client_id\"\"\" statement = ( select ( Rate ) . where ( Rate . user_id == user_id ) . where ( Rate . client_id == client_id ) . where ( Rate . is_active == True ) ) result = session . exec ( statement ) . all () return result","title":"read_active_rate()"},{"location":"api-reference/#backend.api.rate.read_rates","text":"Get all rates Source code in backend\\api\\rate.py @router . get ( \"/\" ) async def read_rates ( session : Session = Depends ( get_session ), ): \"\"\"Get all rates\"\"\" statement = select ( Rate ) result = session . exec ( statement ) . all () return result","title":"read_rates()"},{"location":"api-reference/#backend.api.rate.update_rates","text":"Update a rate. Source code in backend\\api\\rate.py @router . put ( \"/\" ) async def update_rates ( user_id : str = None , client_id : str = None , new_amount : str = None , session : Session = Depends ( get_session ), ): \"\"\"Update a rate.\"\"\" statement = ( select ( Rate ) . where ( Rate . user_id == user_id ) . where ( Rate . client_id == client_id ) . where ( Rate . is_active == True ) ) rate_to_update = session . exec ( statement ) . one () rate_to_update . amount = new_amount session . add ( rate_to_update ) session . commit () session . refresh ( rate_to_update ) return True","title":"update_rates()"},{"location":"api-reference/#backend.api.sponsor","text":"","title":"sponsor"},{"location":"api-reference/#backend.api.sponsor.activate_sponsor","text":"Activate sponsor Source code in backend\\api\\sponsor.py @router . put ( \"/ {sponsor_name} /activate\" ) async def activate_sponsor ( sponsor_name : str = None , session : Session = Depends ( get_session ), ): \"\"\"Activate sponsor\"\"\" statement = select ( Sponsor ) . where ( Sponsor . name == sponsor_name ) sponsor_to_activate = session . exec ( statement ) . one () sponsor_to_activate . is_active = True sponsor_to_activate . updated_at = datetime . now () session . add ( sponsor_to_activate ) session . commit () session . refresh ( sponsor_to_activate ) return sponsor_to_activate","title":"activate_sponsor()"},{"location":"api-reference/#backend.api.sponsor.deactivate_sponsor","text":"Deactivate sponsor Source code in backend\\api\\sponsor.py @router . put ( \"/ {sponsor_name} /deactivate\" ) async def deactivate_sponsor ( sponsor_name : str = None , session : Session = Depends ( get_session ), ): \"\"\"Deactivate sponsor\"\"\" statement = select ( Sponsor ) . where ( Sponsor . name == sponsor_name ) sponsor_to_deactivate = session . exec ( statement ) . one () sponsor_to_deactivate . is_active = False sponsor_to_deactivate . updated_at = datetime . now () session . add ( sponsor_to_deactivate ) session . commit () session . refresh ( sponsor_to_deactivate ) return sponsor_to_deactivate","title":"deactivate_sponsor()"},{"location":"api-reference/#backend.api.sponsor.get_active_sponsor_list","text":"Get list of active sponsors along with name of client Source code in backend\\api\\sponsor.py @router . get ( \"/active\" ) async def get_active_sponsor_list ( session : Session = Depends ( get_session )): \"\"\"Get list of active sponsors along with name of client\"\"\" statement = ( select ( Sponsor . id , Sponsor . client_id , Sponsor . name . label ( \"sponsor_name\" ), Sponsor . short_name . label ( \"sponsor_short_name\" ), Client . name . label ( \"client_name\" ), ) . join ( Client ) . where ( Sponsor . is_active == True ) ) results = session . exec ( statement ) . all () return results","title":"get_active_sponsor_list()"},{"location":"api-reference/#backend.api.sponsor.get_client_name_by_sponsor_id","text":"Get client name by sponsor id Source code in backend\\api\\sponsor.py @router . get ( \"/ {sponsor_id} /client-name\" ) async def get_client_name_by_sponsor_id ( sponsor_id : int , session : Session = Depends ( get_session ) ): \"\"\"Get client name by sponsor id\"\"\" statement = ( select ( Sponsor . id , Client . id , Client . name ) . join ( Client ) . where ( Sponsor . id == sponsor_id ) . where ( Client . is_active == True ) ) result = session . exec ( statement ) . one () return result","title":"get_client_name_by_sponsor_id()"},{"location":"api-reference/#backend.api.sponsor.get_sponsor_list","text":"Get entire sponsor list (enabled and disabled) Source code in backend\\api\\sponsor.py @router . get ( \"/\" ) async def get_sponsor_list ( session : Session = Depends ( get_session )): \"\"\"Get entire sponsor list (enabled and disabled)\"\"\" statement = select ( Sponsor ) results = session . exec ( statement ) . all () return results","title":"get_sponsor_list()"},{"location":"api-reference/#backend.api.sponsor.post_sponsor","text":"Post new sponsor Source code in backend\\api\\sponsor.py @router . post ( \"/\" ) async def post_sponsor ( * , sponsor : Sponsor , session : Session = Depends ( get_session ), ): \"\"\"Post new sponsor\"\"\" statement = select ( Sponsor ) . where ( or_ ( Sponsor . name == sponsor . name , Sponsor . id == sponsor . id ) ) try : result = session . exec ( statement ) . one () return False except NoResultFound : session . add ( sponsor ) session . commit () session . refresh ( sponsor ) return sponsor","title":"post_sponsor()"},{"location":"api-reference/#backend.api.sponsor.read_teams","text":"Read the contents of a given sponsor Source code in backend\\api\\sponsor.py @router . get ( \"/ {sponsor_name} \" ) async def read_teams ( sponsor_name : str = None , session : Session = Depends ( get_session )): \"\"\"Read the contents of a given sponsor\"\"\" statement = select ( Sponsor ) . where ( Sponsor . name == sponsor_name ) try : result = session . exec ( statement ) . ones () return result except NoResultFound : msg = f \"\"\"There is no sponsor named { sponsor_name } \"\"\"","title":"read_teams()"},{"location":"api-reference/#backend.api.sponsor.update_sponsor","text":"Update sponsor Source code in backend\\api\\sponsor.py @router . put ( \"/\" ) async def update_sponsor ( id : int = None , client_id : int = None , name : str = None , short_name : str = None , is_active : bool = None , session : Session = Depends ( get_session ), ): \"\"\"Update sponsor\"\"\" statement = select ( Sponsor ) . where ( or_ ( Sponsor . name == name , Sponsor . id == id )) sponsor_to_update = session . exec ( statement ) . one () sponsor_to_update . client_id = client_id sponsor_to_update . name = name sponsor_to_update . short_name = short_name sponsor_to_update . is_active = is_active session . add ( sponsor_to_update ) sponsor_to_update . updated_at = datetime . now () session . commit () session . refresh ( sponsor_to_update ) return sponsor_to_update","title":"update_sponsor()"},{"location":"api-reference/#backend.api.team","text":"","title":"team"},{"location":"api-reference/#backend.api.team.activate_team","text":"Activate team Source code in backend\\api\\team.py @router . put ( \"/ {team_name} /activate\" ) async def activate_team ( team_name : str = None , session : Session = Depends ( get_session ), ): \"\"\"Activate team\"\"\" statement = select ( Team ) . where ( Team . name == team_name ) team_to_activate = session . exec ( statement ) . one () team_to_activate . is_active = True team_to_activate . updated_at = datetime . now () session . add ( team_to_activate ) session . commit () session . refresh ( team_to_activate ) return team_to_activate","title":"activate_team()"},{"location":"api-reference/#backend.api.team.deactivate_team","text":"Deactivate team Source code in backend\\api\\team.py @router . put ( \"/ {team_name} /deactivate\" ) async def deactivate_team ( team_name : str = None , session : Session = Depends ( get_session ), ): \"\"\"Deactivate team\"\"\" statement = select ( Team ) . where ( Team . name == team_name ) team_to_deactivate = session . exec ( statement ) . one () team_to_deactivate . is_active = False team_to_deactivate . updated_at = datetime . now () session . add ( team_to_deactivate ) session . commit () session . refresh ( team_to_deactivate ) return team_to_deactivate","title":"deactivate_team()"},{"location":"api-reference/#backend.api.team.get_active_team_list","text":"Get list of active teams Source code in backend\\api\\team.py @router . get ( \"/active\" ) async def get_active_team_list ( session : Session = Depends ( get_session )): \"\"\"Get list of active teams\"\"\" statement = ( select ( Team . id , Team . lead_user_id , Team . name . label ( \"team_name\" ), Team . short_name . label ( \"team_short_name\" ), User . id , User . short_name . label ( \"user_name\" ), ) . join ( User ) . where ( Team . is_active == True ) ) results = session . exec ( statement ) . all () return results","title":"get_active_team_list()"},{"location":"api-reference/#backend.api.team.get_team_list","text":"Get team list Source code in backend\\api\\team.py @router . get ( \"/\" ) async def get_team_list ( session : Session = Depends ( get_session )): \"\"\"Get team list\"\"\" statement = select ( Team ) results = session . exec ( statement ) . all () return results","title":"get_team_list()"},{"location":"api-reference/#backend.api.team.get_user_name_by_team_id","text":"Get user name by team id Source code in backend\\api\\team.py @router . get ( \"/ {team_id} /user-name\" ) async def get_user_name_by_team_id ( team_id : int , session : Session = Depends ( get_session ) ): \"\"\"Get user name by team id\"\"\" statement = ( select ( Team . id , User . id , User . name ) . join ( User ) . where ( Team . id == team_id ) . where ( User . active == True ) ) result = session . exec ( statement ) . one () return result","title":"get_user_name_by_team_id()"},{"location":"api-reference/#backend.api.team.post_team","text":"Post new team Source code in backend\\api\\team.py @router . post ( \"/\" ) async def post_team ( * , team : Team , session : Session = Depends ( get_session ), ): \"\"\"Post new team\"\"\" statement = select ( Team ) . where ( or_ ( Team . name == team . name , Team . id == team . id )) try : result = session . exec ( statement ) . one () return False except NoResultFound : session . add ( team ) session . commit () session . refresh ( team ) return team","title":"post_team()"},{"location":"api-reference/#backend.api.team.read_teams","text":"Read the contents of a given team Source code in backend\\api\\team.py @router . get ( \"/ {team_name} \" ) async def read_teams ( team_name : str = None , session : Session = Depends ( get_session )): \"\"\"Read the contents of a given team\"\"\" statement = select ( Team ) . where ( Team . name == team_name ) try : result = session . exec ( statement ) . one () return result except NoResultFound : msg = f \"\"\"There is no team named { team_name } \"\"\" return msg","title":"read_teams()"},{"location":"api-reference/#backend.api.team.update_team","text":"Update team Source code in backend\\api\\team.py @router . put ( \"/\" ) async def update_team ( id : str = None , lead_user_id : str = None , name : str = None , is_active : bool = None , session : Session = Depends ( get_session ), ): \"\"\"Update team\"\"\" statement = select ( Team ) . where ( or_ ( Team . name == name , Team . id == id )) team_to_update = session . exec ( statement ) . one () team_to_update . lead_user_id = lead_user_id team_to_update . name = name team_to_update . is_active = is_active session . add ( team_to_update ) team_to_update . updated_at = datetime . now () session . commit () session . refresh ( team_to_update ) return team_to_update","title":"update_team()"},{"location":"api-reference/#backend.api.timelog","text":"","title":"timelog"},{"location":"api-reference/#backend.api.timelog.delete_timelogs","text":"Delete timelogs Source code in backend\\api\\timelog.py @router . delete ( \"/ {timelog_id} \" ) async def delete_timelogs ( * , timelog_id : int , session : Session = Depends ( get_session ), ): \"\"\"Delete timelogs\"\"\" statement = select ( TimeLog ) . where ( TimeLog . id == timelog_id ) result = session . exec ( statement ) . one () timelog_to_delete = result session . delete ( timelog_to_delete ) session . commit () return True","title":"delete_timelogs()"},{"location":"api-reference/#backend.api.timelog.get_timelog_by_id","text":"Get timelog by id Source code in backend\\api\\timelog.py @router . get ( \"/ {timelog_id} \" ) async def get_timelog_by_id ( timelog_id : int , session : Session = Depends ( get_session )): \"\"\"Get timelog by id\"\"\" statement = select ( TimeLog ) . where ( TimeLog . id == timelog_id ) result = session . exec ( statement ) . one () return result","title":"get_timelog_by_id()"},{"location":"api-reference/#backend.api.timelog.get_timelog_user_id","text":"Get list of timelogs by user_id, month Source code in backend\\api\\timelog.py @router . get ( \"/users/ {user_id} /months/ {month} /years/ {year} \" ) async def get_timelog_user_id ( * , user_id : str , month : int , year : int , session : Session = Depends ( get_session ), ): \"\"\"Get list of timelogs by user_id, month\"\"\" statement = ( select ( TimeLog ) . where ( TimeLog . user_id == user_id ) . where ( TimeLog . month == month ) . where ( TimeLog . year == year ) ) results = session . exec ( statement ) . all () return results","title":"get_timelog_user_id()"},{"location":"api-reference/#backend.api.timelog.get_timelogs_all","text":"Get all timelogs Source code in backend\\api\\timelog.py @router . get ( \"/\" ) async def get_timelogs_all ( session : Session = Depends ( get_session )): \"\"\"Get all timelogs\"\"\" statement = select ( TimeLog ) results = session . exec ( statement ) . all () return results","title":"get_timelogs_all()"},{"location":"api-reference/#backend.api.timelog.timelog","text":"Post timelog example: timelog.start_time = \"2022-01-19T08:30:00.000Z\" Source code in backend\\api\\timelog.py @router . post ( \"/\" ) async def timelog ( * , timelog : TimeLog , session : Session = Depends ( get_session )): \"\"\" Post timelog example: timelog.start_time = \"2022-01-19T08:30:00.000Z\" \"\"\" statement1 = ( select ( TimeLog ) . where ( TimeLog . user_id == timelog . user_id ) . where ( TimeLog . start_time >= timelog . start_time ) . where ( TimeLog . start_time < timelog . end_time ) ) statement2 = ( select ( TimeLog ) . where ( TimeLog . user_id == timelog . user_id ) . where ( TimeLog . end_time > timelog . start_time ) . where ( TimeLog . end_time <= timelog . end_time ) ) statement3 = ( select ( TimeLog ) . where ( TimeLog . user_id == timelog . user_id ) . where ( TimeLog . start_time >= timelog . start_time ) . where ( TimeLog . end_time <= timelog . end_time ) ) statement4 = ( select ( TimeLog ) . where ( TimeLog . user_id == timelog . user_id ) . where ( TimeLog . start_time < timelog . start_time ) . where ( TimeLog . end_time > timelog . end_time ) ) results1 = session . exec ( statement1 ) . all () results2 = session . exec ( statement2 ) . all () results3 = session . exec ( statement3 ) . all () results4 = session . exec ( statement4 ) . all () if results1 or results2 or results3 or results4 : return \"currently posted timelog overlaps another timelog\" else : session . add ( timelog ) session . commit () session . refresh ( timelog ) return timelog","title":"timelog()"},{"location":"api-reference/#backend.api.timelog.update_timelogs","text":"Update timelogs Source code in backend\\api\\timelog.py @router . put ( \"/ {timelog_id} /new-start-time\" ) async def update_timelogs ( * , timelog_id : int = None , timelog_new_start_time : str = None , session : Session = Depends ( get_session ), ): \"\"\"Update timelogs\"\"\" statement = select ( TimeLog ) . where ( TimeLog . id == timelog_id ) timelog_to_update = session . exec ( statement ) . one () timelog_to_update . start_time = timelog_new_start_time session . add ( timelog_to_update ) session . commit () session . refresh ( timelog_to_update ) return timelog_to_update","title":"update_timelogs()"},{"location":"api-reference/#backend.api.user","text":"","title":"user"},{"location":"api-reference/#backend.api.user.get_users","text":"Get list of all users Source code in backend\\api\\user.py @router . get ( \"/\" ) async def get_users ( session : Session = Depends ( get_session ), is_active : bool = None , short_name : str = None , user_name : str = None , user_surname : str = None , email : str = None , role_id : str = None , start_date : str = None , team_id : int = None , ): \"\"\"Get list of all users\"\"\" statement = select ( User ) if is_active != None : statement = select ( User ) . where ( User . is_active == is_active ) if short_name != None : statement = ( select ( User ) . where ( User . is_active == is_active ) . where ( User . short_name == short_name ) ) result = session . exec ( statement ) . all () return result","title":"get_users()"},{"location":"api-reference/#backend.api.user.post_user","text":"Post new user Source code in backend\\api\\user.py @router . post ( \"/\" ) async def post_user ( user : User , session : Session = Depends ( get_session ), ): \"\"\"Post new user\"\"\" statement = select ( User ) . where ( User . short_name == user . short_name ) try : result = session . exec ( statement ) . one () return False except NoResultFound : session . add ( user ) session . commit () session . refresh ( user ) return user","title":"post_user()"},{"location":"api-reference/#backend.api.user.update_user","text":"Update user email Source code in backend\\api\\user.py @router . put ( \"/ {user_id} /\" ) async def update_user ( user_id : int , is_active : Optional [ bool ] = None , new_short_name : Optional [ str ] = None , new_first_name : Optional [ str ] = None , new_last_name : Optional [ str ] = None , new_email : Optional [ str ] = None , new_team_id : Optional [ str ] = None , session : Session = Depends ( get_session ), ): \"\"\"Update user email\"\"\" statement = select ( User ) . where ( User . id == user_id ) user_to_update = session . exec ( statement ) . one () if is_active != None : user_to_update . is_active = is_active if new_short_name != None : user_to_update . short_name = new_short_name if new_first_name != None : user_to_update . first_name = new_first_name if new_last_name != None : user_to_update . last_name = new_last_name if new_email != None : user_to_update . email = new_email if new_team_id != None : user_to_update . team_id = new_team_id user_to_update . updated_at = datetime . now () session . add ( user_to_update ) session . commit () session . refresh ( user_to_update ) return user_to_update","title":"update_user()"},{"location":"how-tos/","text":"Local Setup 1) Install npm npm install -g npm 2) Install npx npm install -g npx 3) Install IDOM pip install \"idom[stable]\" 4) Install Tailwind CSS npm install -D tailwindcss postcss postcss-cli autoprefixer npx tailwindcss init 5) Install FastAPI pip install FastAPI 6) Spin up the backend Fastapi dev server cd timesheets uvicorn backend.main:app --reload 7) Spin up the frontend IDOM dev server cd timesheets/idom_frontend python3 -m run_reload.py 8) Compile the tailwind css file cd idom_frontend/tailwind npm run build Docker Setup 1) Open a git bash terminal 2) Ensure you are in the root directory of the project 3) Navigate to frontend/tailwind and run npm run build cd frontend/tailwind npm run build 4) Run sh build.sh in home directory cd ../.. sh build.sh 5) Run docker-compose up docker-compose up If you don't wish to look at the docker logs, run the command docker-compose up with the flag -d instead of docker-compose up docker-compose up -d Navigating to the application By default, both the Local Setup and the Docker Setup host the application at 127.0.0.1:8001/client/index.html . Thus in order to view the running application, open your favorite web browser, eg. Chrome, FireFox, etc., and enter 127.0.0.1:8001/client/index.html into the search bar. http://127.0.0.1:8001/client/index.html Working on the documentation Timeflow's documentation has been built with MkDocs The easiest way to update these docs is to host them locally, and write the updates necessary. MkDocs auto-reloads everytime you save changes to a file which allows for quick building and visualization. mkdocs serve If you are having trouble with this step, it may be due to mkdocs auto-loading on port 8000. You may have an app already running on port 8000. If that is the case, enter the following code instead. mkdocs serve -a 127 .0.0.1:8003 Note: You can substitute port 8003 with any other port that is not currently in use on your system.","title":"How-tos"},{"location":"how-tos/#local-setup","text":"1) Install npm npm install -g npm 2) Install npx npm install -g npx 3) Install IDOM pip install \"idom[stable]\" 4) Install Tailwind CSS npm install -D tailwindcss postcss postcss-cli autoprefixer npx tailwindcss init 5) Install FastAPI pip install FastAPI 6) Spin up the backend Fastapi dev server cd timesheets uvicorn backend.main:app --reload 7) Spin up the frontend IDOM dev server cd timesheets/idom_frontend python3 -m run_reload.py 8) Compile the tailwind css file cd idom_frontend/tailwind npm run build","title":"Local Setup"},{"location":"how-tos/#docker-setup","text":"1) Open a git bash terminal 2) Ensure you are in the root directory of the project 3) Navigate to frontend/tailwind and run npm run build cd frontend/tailwind npm run build 4) Run sh build.sh in home directory cd ../.. sh build.sh 5) Run docker-compose up docker-compose up If you don't wish to look at the docker logs, run the command docker-compose up with the flag -d instead of docker-compose up docker-compose up -d","title":"Docker Setup"},{"location":"how-tos/#navigating-to-the-application","text":"By default, both the Local Setup and the Docker Setup host the application at 127.0.0.1:8001/client/index.html . Thus in order to view the running application, open your favorite web browser, eg. Chrome, FireFox, etc., and enter 127.0.0.1:8001/client/index.html into the search bar. http://127.0.0.1:8001/client/index.html","title":"Navigating to the application"},{"location":"how-tos/#working-on-the-documentation","text":"Timeflow's documentation has been built with MkDocs The easiest way to update these docs is to host them locally, and write the updates necessary. MkDocs auto-reloads everytime you save changes to a file which allows for quick building and visualization. mkdocs serve If you are having trouble with this step, it may be due to mkdocs auto-loading on port 8000. You may have an app already running on port 8000. If that is the case, enter the following code instead. mkdocs serve -a 127 .0.0.1:8003 Note: You can substitute port 8003 with any other port that is not currently in use on your system.","title":"Working on the documentation"},{"location":"tutorials/","text":"","title":"Tutorials"}]}